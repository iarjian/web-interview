import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.2eafe199.js";const b=JSON.parse('{"title":"面试官：说说React服务端渲染怎么做？原理是什么？","description":"","frontmatter":{},"headers":[],"relativePath":"React/server side rendering.md","filePath":"React/server side rendering.md","lastUpdated":1694418005000}'),p={name:"React/server side rendering.md"},o=l(`<h1 id="面试官-说说react服务端渲染怎么做-原理是什么" tabindex="-1">面试官：说说React服务端渲染怎么做？原理是什么？ <a class="header-anchor" href="#面试官-说说react服务端渲染怎么做-原理是什么" aria-label="Permalink to &quot;面试官：说说React服务端渲染怎么做？原理是什么？&quot;">​</a></h1><p><img src="https://static.vue-js.com/8c93cbe0-f3f7-11eb-85f6-6fac77c0c9b3.png" alt=""></p><h2 id="一、是什么" tabindex="-1">一、是什么 <a class="header-anchor" href="#一、是什么" aria-label="Permalink to &quot;一、是什么&quot;">​</a></h2><p>在<a href="https://mp.weixin.qq.com/s/vvUtC_aAprUjoJRnfFjA1A" target="_blank" rel="noreferrer">SSR中</a>，我们了解到<code>Server-Side Rendering</code> ，简称<code>SSR</code>，意为服务端渲染</p><p>指由服务侧完成页面的 <code>HTML</code> 结构拼接的页面处理技术，发送到浏览器，然后为其绑定状态与事件，成为完全可交互页面的过程</p><p><img src="https://static.vue-js.com/96dc3e20-f3f7-11eb-85f6-6fac77c0c9b3.png" alt=""></p><p>其解决的问题主要有两个：</p><ul><li>SEO，由于搜索引擎爬虫抓取工具可以直接查看完全渲染的页面</li><li>加速首屏加载，解决首屏白屏问题</li></ul><h2 id="二、如何做" tabindex="-1">二、如何做 <a class="header-anchor" href="#二、如何做" aria-label="Permalink to &quot;二、如何做&quot;">​</a></h2><p>在<code>react</code>中，实现<code>SSR</code>主要有两种形式：</p><ul><li>手动搭建一个 SSR 框架</li><li>使用成熟的SSR 框架，如 Next.JS</li></ul><p>这里主要以手动搭建一个<code>SSR</code>框架进行实现</p><p>首先通过<code>express</code>启动一个<code>app.js</code>文件，用于监听3000端口的请求，当请求根目录时，返回<code>HTML</code>，如下：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">express</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;express&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">app</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">express</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">app.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;/&#39;</span><span style="color:#E1E4E8;">, (</span><span style="color:#FFAB70;">req</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">res</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> res.</span><span style="color:#B392F0;">send</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`</span></span>
<span class="line"><span style="color:#9ECBFF;">&lt;html&gt;</span></span>
<span class="line"><span style="color:#9ECBFF;">   &lt;head&gt;</span></span>
<span class="line"><span style="color:#9ECBFF;">       &lt;title&gt;ssr demo&lt;/title&gt;</span></span>
<span class="line"><span style="color:#9ECBFF;">   &lt;/head&gt;</span></span>
<span class="line"><span style="color:#9ECBFF;">   &lt;body&gt;</span></span>
<span class="line"><span style="color:#9ECBFF;">       Hello world</span></span>
<span class="line"><span style="color:#9ECBFF;">   &lt;/body&gt;</span></span>
<span class="line"><span style="color:#9ECBFF;">&lt;/html&gt;</span></span>
<span class="line"><span style="color:#9ECBFF;">\`</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">app.</span><span style="color:#B392F0;">listen</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">3000</span><span style="color:#E1E4E8;">, () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Exampleapp listening on port 3000!&#39;</span><span style="color:#E1E4E8;">))</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">express</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;express&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">app</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">express</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">app.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;/&#39;</span><span style="color:#24292E;">, (</span><span style="color:#E36209;">req</span><span style="color:#24292E;">,</span><span style="color:#E36209;">res</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> res.</span><span style="color:#6F42C1;">send</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`</span></span>
<span class="line"><span style="color:#032F62;">&lt;html&gt;</span></span>
<span class="line"><span style="color:#032F62;">   &lt;head&gt;</span></span>
<span class="line"><span style="color:#032F62;">       &lt;title&gt;ssr demo&lt;/title&gt;</span></span>
<span class="line"><span style="color:#032F62;">   &lt;/head&gt;</span></span>
<span class="line"><span style="color:#032F62;">   &lt;body&gt;</span></span>
<span class="line"><span style="color:#032F62;">       Hello world</span></span>
<span class="line"><span style="color:#032F62;">   &lt;/body&gt;</span></span>
<span class="line"><span style="color:#032F62;">&lt;/html&gt;</span></span>
<span class="line"><span style="color:#032F62;">\`</span><span style="color:#24292E;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">app.</span><span style="color:#6F42C1;">listen</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3000</span><span style="color:#24292E;">, () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Exampleapp listening on port 3000!&#39;</span><span style="color:#24292E;">))</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>然后再服务器中编写<code>react</code>代码，在<code>app.js</code>中进行应引用</p><div class="language-jsx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> React </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;react&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Home</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> &lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;home&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> Home</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> React </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;react&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Home</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;">{</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;home&lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> Home</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>为了让服务器能够识别<code>JSX</code>，这里需要使用<code>webpakc</code>对项目进行打包转换，创建一个配置文件<code>webpack.server.js</code>并进行相关配置，如下：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">path</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;path&#39;</span><span style="color:#E1E4E8;">)    </span><span style="color:#6A737D;">//node的path模块</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nodeExternals</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;webpack-node-externals&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    target:</span><span style="color:#9ECBFF;">&#39;node&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    mode:</span><span style="color:#9ECBFF;">&#39;development&#39;</span><span style="color:#E1E4E8;">,           </span><span style="color:#6A737D;">//开发模式</span></span>
<span class="line"><span style="color:#E1E4E8;">    entry:</span><span style="color:#9ECBFF;">&#39;./app.js&#39;</span><span style="color:#E1E4E8;">,             </span><span style="color:#6A737D;">//入口</span></span>
<span class="line"><span style="color:#E1E4E8;">    output: {                     </span><span style="color:#6A737D;">//打包出口</span></span>
<span class="line"><span style="color:#E1E4E8;">        filename:</span><span style="color:#9ECBFF;">&#39;bundle.js&#39;</span><span style="color:#E1E4E8;">,     </span><span style="color:#6A737D;">//打包后的文件名</span></span>
<span class="line"><span style="color:#E1E4E8;">        path:path.</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(__dirname,</span><span style="color:#9ECBFF;">&#39;build&#39;</span><span style="color:#E1E4E8;">)    </span><span style="color:#6A737D;">//存放到根目录的build文件夹</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    externals: [</span><span style="color:#B392F0;">nodeExternals</span><span style="color:#E1E4E8;">()],  </span><span style="color:#6A737D;">//保持node中require的引用方式</span></span>
<span class="line"><span style="color:#E1E4E8;">    module: {</span></span>
<span class="line"><span style="color:#E1E4E8;">        rules: [{                  </span><span style="color:#6A737D;">//打包规则</span></span>
<span class="line"><span style="color:#E1E4E8;">           test:</span><span style="color:#DBEDFF;">   </span><span style="color:#9ECBFF;">/</span><span style="color:#85E89D;font-weight:bold;">\\.</span><span style="color:#DBEDFF;">js</span><span style="color:#F97583;">?$</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">,       </span><span style="color:#6A737D;">//对所有js文件进行打包</span></span>
<span class="line"><span style="color:#E1E4E8;">           loader:</span><span style="color:#9ECBFF;">&#39;babel-loader&#39;</span><span style="color:#E1E4E8;">,  </span><span style="color:#6A737D;">//使用babel-loader进行打包</span></span>
<span class="line"><span style="color:#E1E4E8;">           exclude:</span><span style="color:#DBEDFF;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#DBEDFF;">node_modules</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">,</span><span style="color:#6A737D;">//不打包node_modules中的js文件</span></span>
<span class="line"><span style="color:#E1E4E8;">           options: {</span></span>
<span class="line"><span style="color:#E1E4E8;">               presets: [</span><span style="color:#9ECBFF;">&#39;react&#39;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&#39;stage-0&#39;</span><span style="color:#E1E4E8;">,[</span><span style="color:#9ECBFF;">&#39;env&#39;</span><span style="color:#E1E4E8;">, { </span></span>
<span class="line"><span style="color:#E1E4E8;">                                  </span><span style="color:#6A737D;">//loader时额外的打包规则,对react,JSX，ES6进行转换</span></span>
<span class="line"><span style="color:#E1E4E8;">                    targets: {</span></span>
<span class="line"><span style="color:#E1E4E8;">                        browsers: [</span><span style="color:#9ECBFF;">&#39;last 2versions&#39;</span><span style="color:#E1E4E8;">]   </span><span style="color:#6A737D;">//对主流浏览器最近两个版本进行兼容</span></span>
<span class="line"><span style="color:#E1E4E8;">                    }</span></span>
<span class="line"><span style="color:#E1E4E8;">               }]]</span></span>
<span class="line"><span style="color:#E1E4E8;">           }</span></span>
<span class="line"><span style="color:#E1E4E8;">       }]</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">path</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;path&#39;</span><span style="color:#24292E;">)    </span><span style="color:#6A737D;">//node的path模块</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">nodeExternals</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;webpack-node-externals&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    target:</span><span style="color:#032F62;">&#39;node&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    mode:</span><span style="color:#032F62;">&#39;development&#39;</span><span style="color:#24292E;">,           </span><span style="color:#6A737D;">//开发模式</span></span>
<span class="line"><span style="color:#24292E;">    entry:</span><span style="color:#032F62;">&#39;./app.js&#39;</span><span style="color:#24292E;">,             </span><span style="color:#6A737D;">//入口</span></span>
<span class="line"><span style="color:#24292E;">    output: {                     </span><span style="color:#6A737D;">//打包出口</span></span>
<span class="line"><span style="color:#24292E;">        filename:</span><span style="color:#032F62;">&#39;bundle.js&#39;</span><span style="color:#24292E;">,     </span><span style="color:#6A737D;">//打包后的文件名</span></span>
<span class="line"><span style="color:#24292E;">        path:path.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(__dirname,</span><span style="color:#032F62;">&#39;build&#39;</span><span style="color:#24292E;">)    </span><span style="color:#6A737D;">//存放到根目录的build文件夹</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    externals: [</span><span style="color:#6F42C1;">nodeExternals</span><span style="color:#24292E;">()],  </span><span style="color:#6A737D;">//保持node中require的引用方式</span></span>
<span class="line"><span style="color:#24292E;">    module: {</span></span>
<span class="line"><span style="color:#24292E;">        rules: [{                  </span><span style="color:#6A737D;">//打包规则</span></span>
<span class="line"><span style="color:#24292E;">           test:</span><span style="color:#032F62;">   /</span><span style="color:#22863A;font-weight:bold;">\\.</span><span style="color:#032F62;">js</span><span style="color:#D73A49;">?$</span><span style="color:#032F62;">/</span><span style="color:#24292E;">,       </span><span style="color:#6A737D;">//对所有js文件进行打包</span></span>
<span class="line"><span style="color:#24292E;">           loader:</span><span style="color:#032F62;">&#39;babel-loader&#39;</span><span style="color:#24292E;">,  </span><span style="color:#6A737D;">//使用babel-loader进行打包</span></span>
<span class="line"><span style="color:#24292E;">           exclude:</span><span style="color:#032F62;"> /node_modules/</span><span style="color:#24292E;">,</span><span style="color:#6A737D;">//不打包node_modules中的js文件</span></span>
<span class="line"><span style="color:#24292E;">           options: {</span></span>
<span class="line"><span style="color:#24292E;">               presets: [</span><span style="color:#032F62;">&#39;react&#39;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&#39;stage-0&#39;</span><span style="color:#24292E;">,[</span><span style="color:#032F62;">&#39;env&#39;</span><span style="color:#24292E;">, { </span></span>
<span class="line"><span style="color:#24292E;">                                  </span><span style="color:#6A737D;">//loader时额外的打包规则,对react,JSX，ES6进行转换</span></span>
<span class="line"><span style="color:#24292E;">                    targets: {</span></span>
<span class="line"><span style="color:#24292E;">                        browsers: [</span><span style="color:#032F62;">&#39;last 2versions&#39;</span><span style="color:#24292E;">]   </span><span style="color:#6A737D;">//对主流浏览器最近两个版本进行兼容</span></span>
<span class="line"><span style="color:#24292E;">                    }</span></span>
<span class="line"><span style="color:#24292E;">               }]]</span></span>
<span class="line"><span style="color:#24292E;">           }</span></span>
<span class="line"><span style="color:#24292E;">       }]</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div><p>接着借助<code>react-dom</code>提供了服务端渲染的 <code>renderToString</code>方法，负责把<code>React</code>组件解析成<code>html</code></p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> express </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;express&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> React </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;react&#39;</span><span style="color:#6A737D;">//引入React以支持JSX的语法</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { renderToString } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;react-dom/server&#39;</span><span style="color:#6A737D;">//引入renderToString方法</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> Home </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;">&#39;./src/containers/Home&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">app</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">express</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">content</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">renderToString</span><span style="color:#E1E4E8;">(&lt;</span><span style="color:#79B8FF;">Home</span><span style="color:#E1E4E8;">/&gt;)</span></span>
<span class="line"><span style="color:#E1E4E8;">app.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;/&#39;</span><span style="color:#E1E4E8;">,(</span><span style="color:#FFAB70;">req</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">res</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> res.</span><span style="color:#B392F0;">send</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`</span></span>
<span class="line"><span style="color:#9ECBFF;">&lt;html&gt;</span></span>
<span class="line"><span style="color:#9ECBFF;">   &lt;head&gt;</span></span>
<span class="line"><span style="color:#9ECBFF;">       &lt;title&gt;ssr demo&lt;/title&gt;</span></span>
<span class="line"><span style="color:#9ECBFF;">   &lt;/head&gt;</span></span>
<span class="line"><span style="color:#9ECBFF;">   &lt;body&gt;</span></span>
<span class="line"><span style="color:#9ECBFF;">        \${</span><span style="color:#E1E4E8;">content</span><span style="color:#9ECBFF;">}</span></span>
<span class="line"><span style="color:#9ECBFF;">   &lt;/body&gt;</span></span>
<span class="line"><span style="color:#9ECBFF;">&lt;/html&gt;</span></span>
<span class="line"><span style="color:#9ECBFF;">\`</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">app.</span><span style="color:#B392F0;">listen</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">3001</span><span style="color:#E1E4E8;">, () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Exampleapp listening on port 3001!&#39;</span><span style="color:#E1E4E8;">))</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> express </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;express&#39;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> React </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;react&#39;</span><span style="color:#6A737D;">//引入React以支持JSX的语法</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { renderToString } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;react-dom/server&#39;</span><span style="color:#6A737D;">//引入renderToString方法</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> Home </span><span style="color:#D73A49;">from</span><span style="color:#032F62;">&#39;./src/containers/Home&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">app</span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">express</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">content</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">renderToString</span><span style="color:#24292E;">(&lt;</span><span style="color:#005CC5;">Home</span><span style="color:#24292E;">/&gt;)</span></span>
<span class="line"><span style="color:#24292E;">app.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;/&#39;</span><span style="color:#24292E;">,(</span><span style="color:#E36209;">req</span><span style="color:#24292E;">,</span><span style="color:#E36209;">res</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> res.</span><span style="color:#6F42C1;">send</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`</span></span>
<span class="line"><span style="color:#032F62;">&lt;html&gt;</span></span>
<span class="line"><span style="color:#032F62;">   &lt;head&gt;</span></span>
<span class="line"><span style="color:#032F62;">       &lt;title&gt;ssr demo&lt;/title&gt;</span></span>
<span class="line"><span style="color:#032F62;">   &lt;/head&gt;</span></span>
<span class="line"><span style="color:#032F62;">   &lt;body&gt;</span></span>
<span class="line"><span style="color:#032F62;">        \${</span><span style="color:#24292E;">content</span><span style="color:#032F62;">}</span></span>
<span class="line"><span style="color:#032F62;">   &lt;/body&gt;</span></span>
<span class="line"><span style="color:#032F62;">&lt;/html&gt;</span></span>
<span class="line"><span style="color:#032F62;">\`</span><span style="color:#24292E;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">app.</span><span style="color:#6F42C1;">listen</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3001</span><span style="color:#24292E;">, () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Exampleapp listening on port 3001!&#39;</span><span style="color:#24292E;">))</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><p>上面的过程中，已经能够成功将组件渲染到了页面上</p><p>但是像一些事件处理的方法，是无法在服务端完成，因此需要将组件代码在浏览器中再执行一遍，这种服务器端和客户端共用一套代码的方式就称之为<strong>同构</strong></p><p>重构通俗讲就是一套React代码在服务器上运行一遍，到达浏览器又运行一遍：</p><ul><li>服务端渲染完成页面结构</li><li>浏览器端渲染完成事件绑定</li></ul><p>浏览器实现事件绑定的方式为让浏览器去拉取<code>JS</code>文件执行，让<code>JS</code>代码来控制，因此需要引入<code>script</code>标签</p><p>通过<code>script</code>标签为页面引入客户端执行的<code>react</code>代码，并通过<code>express</code>的<code>static</code>中间件为<code>js</code>文件配置路由，修改如下：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> express </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;express&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> React </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;react&#39;</span><span style="color:#6A737D;">//引入React以支持JSX的语法</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { renderToString } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;">&#39;react-dom/server&#39;</span><span style="color:#6A737D;">//引入renderToString方法</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> Home </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./src/containers/Home&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">app</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">express</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">app.</span><span style="color:#B392F0;">use</span><span style="color:#E1E4E8;">(express.</span><span style="color:#B392F0;">static</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;public&#39;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#6A737D;">//使用express提供的static中间件,中间件会将所有静态文件的路由指向public文件夹</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">content</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">renderToString</span><span style="color:#E1E4E8;">(&lt;</span><span style="color:#79B8FF;">Home</span><span style="color:#E1E4E8;">/&gt;)</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">app.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;/&#39;</span><span style="color:#E1E4E8;">,(</span><span style="color:#FFAB70;">req</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">res</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;">res.</span><span style="color:#B392F0;">send</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`</span></span>
<span class="line"><span style="color:#9ECBFF;">&lt;html&gt;</span></span>
<span class="line"><span style="color:#9ECBFF;">   &lt;head&gt;</span></span>
<span class="line"><span style="color:#9ECBFF;">       &lt;title&gt;ssr demo&lt;/title&gt;</span></span>
<span class="line"><span style="color:#9ECBFF;">   &lt;/head&gt;</span></span>
<span class="line"><span style="color:#9ECBFF;">   &lt;body&gt;</span></span>
<span class="line"><span style="color:#9ECBFF;">        \${</span><span style="color:#E1E4E8;">content</span><span style="color:#9ECBFF;">}</span></span>
<span class="line"><span style="color:#9ECBFF;">   &lt;script src=&quot;/index.js&quot;&gt;&lt;/script&gt;</span></span>
<span class="line"><span style="color:#9ECBFF;">   &lt;/body&gt;</span></span>
<span class="line"><span style="color:#9ECBFF;">&lt;/html&gt;</span></span>
<span class="line"><span style="color:#9ECBFF;">\`</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;"> app.</span><span style="color:#B392F0;">listen</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">3001</span><span style="color:#E1E4E8;">, () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Example app listening on port 3001!&#39;</span><span style="color:#E1E4E8;">))</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> express </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;express&#39;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> React </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;react&#39;</span><span style="color:#6A737D;">//引入React以支持JSX的语法</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { renderToString } </span><span style="color:#D73A49;">from</span><span style="color:#032F62;">&#39;react-dom/server&#39;</span><span style="color:#6A737D;">//引入renderToString方法</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> Home </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./src/containers/Home&#39;</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">app</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">express</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">app.</span><span style="color:#6F42C1;">use</span><span style="color:#24292E;">(express.</span><span style="color:#6F42C1;">static</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;public&#39;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#6A737D;">//使用express提供的static中间件,中间件会将所有静态文件的路由指向public文件夹</span></span>
<span class="line"><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">content</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">renderToString</span><span style="color:#24292E;">(&lt;</span><span style="color:#005CC5;">Home</span><span style="color:#24292E;">/&gt;)</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">app.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;/&#39;</span><span style="color:#24292E;">,(</span><span style="color:#E36209;">req</span><span style="color:#24292E;">,</span><span style="color:#E36209;">res</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;">res.</span><span style="color:#6F42C1;">send</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`</span></span>
<span class="line"><span style="color:#032F62;">&lt;html&gt;</span></span>
<span class="line"><span style="color:#032F62;">   &lt;head&gt;</span></span>
<span class="line"><span style="color:#032F62;">       &lt;title&gt;ssr demo&lt;/title&gt;</span></span>
<span class="line"><span style="color:#032F62;">   &lt;/head&gt;</span></span>
<span class="line"><span style="color:#032F62;">   &lt;body&gt;</span></span>
<span class="line"><span style="color:#032F62;">        \${</span><span style="color:#24292E;">content</span><span style="color:#032F62;">}</span></span>
<span class="line"><span style="color:#032F62;">   &lt;script src=&quot;/index.js&quot;&gt;&lt;/script&gt;</span></span>
<span class="line"><span style="color:#032F62;">   &lt;/body&gt;</span></span>
<span class="line"><span style="color:#032F62;">&lt;/html&gt;</span></span>
<span class="line"><span style="color:#032F62;">\`</span><span style="color:#24292E;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;"> app.</span><span style="color:#6F42C1;">listen</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3001</span><span style="color:#24292E;">, () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Example app listening on port 3001!&#39;</span><span style="color:#24292E;">))</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><p>然后再客户端执行以下<code>react</code>代码，新建<code>webpack.client.js</code>作为客户端React代码的<code>webpack</code>配置文件如下：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">path</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;path&#39;</span><span style="color:#E1E4E8;">)                    </span><span style="color:#6A737D;">//node的path模块</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    mode:</span><span style="color:#9ECBFF;">&#39;development&#39;</span><span style="color:#E1E4E8;">,                         </span><span style="color:#6A737D;">//开发模式</span></span>
<span class="line"><span style="color:#E1E4E8;">    entry:</span><span style="color:#9ECBFF;">&#39;./src/client/index.js&#39;</span><span style="color:#E1E4E8;">,              </span><span style="color:#6A737D;">//入口</span></span>
<span class="line"><span style="color:#E1E4E8;">    output: {                                   </span><span style="color:#6A737D;">//打包出口</span></span>
<span class="line"><span style="color:#E1E4E8;">        filename:</span><span style="color:#9ECBFF;">&#39;index.js&#39;</span><span style="color:#E1E4E8;">,                    </span><span style="color:#6A737D;">//打包后的文件名</span></span>
<span class="line"><span style="color:#E1E4E8;">        path:path.</span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(__dirname,</span><span style="color:#9ECBFF;">&#39;public&#39;</span><span style="color:#E1E4E8;">)   </span><span style="color:#6A737D;">//存放到根目录的build文件夹</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    module: {</span></span>
<span class="line"><span style="color:#E1E4E8;">        rules: [{                               </span><span style="color:#6A737D;">//打包规则</span></span>
<span class="line"><span style="color:#E1E4E8;">           test:</span><span style="color:#DBEDFF;">   </span><span style="color:#9ECBFF;">/</span><span style="color:#85E89D;font-weight:bold;">\\.</span><span style="color:#DBEDFF;">js</span><span style="color:#F97583;">?$</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">,                    </span><span style="color:#6A737D;">//对所有js文件进行打包</span></span>
<span class="line"><span style="color:#E1E4E8;">           loader:</span><span style="color:#9ECBFF;">&#39;babel-loader&#39;</span><span style="color:#E1E4E8;">,               </span><span style="color:#6A737D;">//使用babel-loader进行打包</span></span>
<span class="line"><span style="color:#E1E4E8;">           exclude:</span><span style="color:#DBEDFF;"> </span><span style="color:#9ECBFF;">/</span><span style="color:#DBEDFF;">node_modules</span><span style="color:#9ECBFF;">/</span><span style="color:#E1E4E8;">,             </span><span style="color:#6A737D;">//不打包node_modules中的js文件</span></span>
<span class="line"><span style="color:#E1E4E8;">           options: {</span></span>
<span class="line"><span style="color:#E1E4E8;">               presets: [</span><span style="color:#9ECBFF;">&#39;react&#39;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&#39;stage-0&#39;</span><span style="color:#E1E4E8;">,[</span><span style="color:#9ECBFF;">&#39;env&#39;</span><span style="color:#E1E4E8;">, {     </span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#6A737D;">//loader时额外的打包规则,这里对react,JSX进行转换</span></span>
<span class="line"><span style="color:#E1E4E8;">                    targets: {</span></span>
<span class="line"><span style="color:#E1E4E8;">                        browsers: [</span><span style="color:#9ECBFF;">&#39;last 2versions&#39;</span><span style="color:#E1E4E8;">]   </span><span style="color:#6A737D;">//对主流浏览器最近两个版本进行兼容</span></span>
<span class="line"><span style="color:#E1E4E8;">                    }</span></span>
<span class="line"><span style="color:#E1E4E8;">               }]]</span></span>
<span class="line"><span style="color:#E1E4E8;">           }</span></span>
<span class="line"><span style="color:#E1E4E8;">       }]</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">path</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;path&#39;</span><span style="color:#24292E;">)                    </span><span style="color:#6A737D;">//node的path模块</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    mode:</span><span style="color:#032F62;">&#39;development&#39;</span><span style="color:#24292E;">,                         </span><span style="color:#6A737D;">//开发模式</span></span>
<span class="line"><span style="color:#24292E;">    entry:</span><span style="color:#032F62;">&#39;./src/client/index.js&#39;</span><span style="color:#24292E;">,              </span><span style="color:#6A737D;">//入口</span></span>
<span class="line"><span style="color:#24292E;">    output: {                                   </span><span style="color:#6A737D;">//打包出口</span></span>
<span class="line"><span style="color:#24292E;">        filename:</span><span style="color:#032F62;">&#39;index.js&#39;</span><span style="color:#24292E;">,                    </span><span style="color:#6A737D;">//打包后的文件名</span></span>
<span class="line"><span style="color:#24292E;">        path:path.</span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(__dirname,</span><span style="color:#032F62;">&#39;public&#39;</span><span style="color:#24292E;">)   </span><span style="color:#6A737D;">//存放到根目录的build文件夹</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">    module: {</span></span>
<span class="line"><span style="color:#24292E;">        rules: [{                               </span><span style="color:#6A737D;">//打包规则</span></span>
<span class="line"><span style="color:#24292E;">           test:</span><span style="color:#032F62;">   /</span><span style="color:#22863A;font-weight:bold;">\\.</span><span style="color:#032F62;">js</span><span style="color:#D73A49;">?$</span><span style="color:#032F62;">/</span><span style="color:#24292E;">,                    </span><span style="color:#6A737D;">//对所有js文件进行打包</span></span>
<span class="line"><span style="color:#24292E;">           loader:</span><span style="color:#032F62;">&#39;babel-loader&#39;</span><span style="color:#24292E;">,               </span><span style="color:#6A737D;">//使用babel-loader进行打包</span></span>
<span class="line"><span style="color:#24292E;">           exclude:</span><span style="color:#032F62;"> /node_modules/</span><span style="color:#24292E;">,             </span><span style="color:#6A737D;">//不打包node_modules中的js文件</span></span>
<span class="line"><span style="color:#24292E;">           options: {</span></span>
<span class="line"><span style="color:#24292E;">               presets: [</span><span style="color:#032F62;">&#39;react&#39;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&#39;stage-0&#39;</span><span style="color:#24292E;">,[</span><span style="color:#032F62;">&#39;env&#39;</span><span style="color:#24292E;">, {     </span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6A737D;">//loader时额外的打包规则,这里对react,JSX进行转换</span></span>
<span class="line"><span style="color:#24292E;">                    targets: {</span></span>
<span class="line"><span style="color:#24292E;">                        browsers: [</span><span style="color:#032F62;">&#39;last 2versions&#39;</span><span style="color:#24292E;">]   </span><span style="color:#6A737D;">//对主流浏览器最近两个版本进行兼容</span></span>
<span class="line"><span style="color:#24292E;">                    }</span></span>
<span class="line"><span style="color:#24292E;">               }]]</span></span>
<span class="line"><span style="color:#24292E;">           }</span></span>
<span class="line"><span style="color:#24292E;">       }]</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><p>这种方法就能够简单实现首页的<code>react</code>服务端渲染，过程对应如下图：</p><p><img src="https://static.vue-js.com/a2894970-f3f7-11eb-85f6-6fac77c0c9b3.png" alt=""></p><p>在做完初始渲染的时候，一个应用会存在路由的情况，配置信息如下：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> React </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;react&#39;</span><span style="color:#E1E4E8;">                   </span><span style="color:#6A737D;">//引入React以支持JSX</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { Route } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;react-router-dom&#39;</span><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//引入路由</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> Home </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./containers/Home&#39;</span><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//引入Home组件</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#79B8FF;">Route</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">path</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;/&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">exact</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">component</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{Home}&gt;&lt;/</span><span style="color:#79B8FF;">Route</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    &lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> React </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;react&#39;</span><span style="color:#24292E;">                   </span><span style="color:#6A737D;">//引入React以支持JSX</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { Route } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;react-router-dom&#39;</span><span style="color:#24292E;">    </span><span style="color:#6A737D;">//引入路由</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> Home </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./containers/Home&#39;</span><span style="color:#24292E;">        </span><span style="color:#6A737D;">//引入Home组件</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">    &lt;</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#005CC5;">Route</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">path</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;/&quot;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">exact</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">component</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{Home}&gt;&lt;/</span><span style="color:#005CC5;">Route</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    &lt;/</span><span style="color:#22863A;">div</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>然后可以通过<code>index.js</code>引用路由信息，如下：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> React </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;react&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> ReactDom </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;react-dom&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { BrowserRouter } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;">&#39;react-router-dom&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> Router </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;">&#39;../Routers&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">App</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#79B8FF;">BrowserRouter</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">           {Router}</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;/</span><span style="color:#79B8FF;">BrowserRouter</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    )</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">ReactDom.</span><span style="color:#B392F0;">hydrate</span><span style="color:#E1E4E8;">(&lt;</span><span style="color:#79B8FF;">App</span><span style="color:#E1E4E8;">/&gt;, document.</span><span style="color:#B392F0;">getElementById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;root&#39;</span><span style="color:#E1E4E8;">))</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> React </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;react&#39;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> ReactDom </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;react-dom&#39;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { BrowserRouter } </span><span style="color:#D73A49;">from</span><span style="color:#032F62;">&#39;react-router-dom&#39;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> Router </span><span style="color:#D73A49;">from</span><span style="color:#032F62;">&#39;../Routers&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">App</span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#005CC5;">BrowserRouter</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">           {Router}</span></span>
<span class="line"><span style="color:#24292E;">        &lt;/</span><span style="color:#005CC5;">BrowserRouter</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    )</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">ReactDom.</span><span style="color:#6F42C1;">hydrate</span><span style="color:#24292E;">(&lt;</span><span style="color:#005CC5;">App</span><span style="color:#24292E;">/&gt;, document.</span><span style="color:#6F42C1;">getElementById</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;root&#39;</span><span style="color:#24292E;">))</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>这时候控制台会存在报错信息，原因在于每个<code>Route</code>组件外面包裹着一层<code>div</code>，但服务端返回的代码中并没有这个<code>div</code></p><p>解决方法只需要将路由信息在服务端执行一遍，使用使用<code>StaticRouter</code>来替代<code>BrowserRouter</code>，通过<code>context</code>进行参数传递</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> express </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;express&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> React </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;react&#39;</span><span style="color:#6A737D;">//引入React以支持JSX的语法</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { renderToString } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;react-dom/server&#39;</span><span style="color:#6A737D;">//引入renderToString方法</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { StaticRouter } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;react-router-dom&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> Router </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;../Routers&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">app</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">express</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">app.</span><span style="color:#B392F0;">use</span><span style="color:#E1E4E8;">(express.</span><span style="color:#B392F0;">static</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;public&#39;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#6A737D;">//使用express提供的static中间件,中间件会将所有静态文件的路由指向public文件夹</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">app.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;/&#39;</span><span style="color:#E1E4E8;">,(</span><span style="color:#FFAB70;">req</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">res</span><span style="color:#E1E4E8;">)</span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">content</span><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">renderToString</span><span style="color:#E1E4E8;">((</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//传入当前path</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//context为必填参数,用于服务端渲染参数传递</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;</span><span style="color:#79B8FF;">StaticRouter</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">location</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{req.path} </span><span style="color:#B392F0;">context</span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">{{}}&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">           {Router}</span></span>
<span class="line"><span style="color:#E1E4E8;">        &lt;/</span><span style="color:#79B8FF;">StaticRouter</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    ))</span></span>
<span class="line"><span style="color:#E1E4E8;">    res.</span><span style="color:#B392F0;">send</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`</span></span>
<span class="line"><span style="color:#9ECBFF;">   &lt;html&gt;</span></span>
<span class="line"><span style="color:#9ECBFF;">       &lt;head&gt;</span></span>
<span class="line"><span style="color:#9ECBFF;">           &lt;title&gt;ssr demo&lt;/title&gt;</span></span>
<span class="line"><span style="color:#9ECBFF;">       &lt;/head&gt;</span></span>
<span class="line"><span style="color:#9ECBFF;">       &lt;body&gt;</span></span>
<span class="line"><span style="color:#9ECBFF;">       &lt;div id=&quot;root&quot;&gt;\${</span><span style="color:#E1E4E8;">content</span><span style="color:#9ECBFF;">}&lt;/div&gt;</span></span>
<span class="line"><span style="color:#9ECBFF;">       &lt;script src=&quot;/index.js&quot;&gt;&lt;/script&gt;</span></span>
<span class="line"><span style="color:#9ECBFF;">       &lt;/body&gt;</span></span>
<span class="line"><span style="color:#9ECBFF;">   &lt;/html&gt;</span></span>
<span class="line"><span style="color:#9ECBFF;">    \`</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">app.</span><span style="color:#B392F0;">listen</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">3001</span><span style="color:#E1E4E8;">, () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Exampleapp listening on port 3001!&#39;</span><span style="color:#E1E4E8;">))</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> express </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;express&#39;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> React </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;react&#39;</span><span style="color:#6A737D;">//引入React以支持JSX的语法</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { renderToString } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;react-dom/server&#39;</span><span style="color:#6A737D;">//引入renderToString方法</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { StaticRouter } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;react-router-dom&#39;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> Router </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;../Routers&#39;</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">app</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">express</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">app.</span><span style="color:#6F42C1;">use</span><span style="color:#24292E;">(express.</span><span style="color:#6F42C1;">static</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;public&#39;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#6A737D;">//使用express提供的static中间件,中间件会将所有静态文件的路由指向public文件夹</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">app.</span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;/&#39;</span><span style="color:#24292E;">,(</span><span style="color:#E36209;">req</span><span style="color:#24292E;">,</span><span style="color:#E36209;">res</span><span style="color:#24292E;">)</span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">content</span><span style="color:#24292E;">  </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">renderToString</span><span style="color:#24292E;">((</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//传入当前path</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//context为必填参数,用于服务端渲染参数传递</span></span>
<span class="line"><span style="color:#24292E;">        &lt;</span><span style="color:#005CC5;">StaticRouter</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">location</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{req.path} </span><span style="color:#6F42C1;">context</span><span style="color:#D73A49;">=</span><span style="color:#24292E;">{{}}&gt;</span></span>
<span class="line"><span style="color:#24292E;">           {Router}</span></span>
<span class="line"><span style="color:#24292E;">        &lt;/</span><span style="color:#005CC5;">StaticRouter</span><span style="color:#24292E;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    ))</span></span>
<span class="line"><span style="color:#24292E;">    res.</span><span style="color:#6F42C1;">send</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`</span></span>
<span class="line"><span style="color:#032F62;">   &lt;html&gt;</span></span>
<span class="line"><span style="color:#032F62;">       &lt;head&gt;</span></span>
<span class="line"><span style="color:#032F62;">           &lt;title&gt;ssr demo&lt;/title&gt;</span></span>
<span class="line"><span style="color:#032F62;">       &lt;/head&gt;</span></span>
<span class="line"><span style="color:#032F62;">       &lt;body&gt;</span></span>
<span class="line"><span style="color:#032F62;">       &lt;div id=&quot;root&quot;&gt;\${</span><span style="color:#24292E;">content</span><span style="color:#032F62;">}&lt;/div&gt;</span></span>
<span class="line"><span style="color:#032F62;">       &lt;script src=&quot;/index.js&quot;&gt;&lt;/script&gt;</span></span>
<span class="line"><span style="color:#032F62;">       &lt;/body&gt;</span></span>
<span class="line"><span style="color:#032F62;">   &lt;/html&gt;</span></span>
<span class="line"><span style="color:#032F62;">    \`</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">app.</span><span style="color:#6F42C1;">listen</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3001</span><span style="color:#24292E;">, () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;Exampleapp listening on port 3001!&#39;</span><span style="color:#24292E;">))</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div><p>这样也就完成了路由的服务端渲染</p><h2 id="三、原理" tabindex="-1">三、原理 <a class="header-anchor" href="#三、原理" aria-label="Permalink to &quot;三、原理&quot;">​</a></h2><p>整体<code>react</code>服务端渲染原理并不复杂，具体如下：</p><p><code>node server</code> 接收客户端请求，得到当前的请求<code>url</code> 路径，然后在已有的路由表内查找到对应的组件，拿到需要请求的数据，将数据作为 <code>props</code>、<code>context</code>或者<code>store</code> 形式传入组件</p><p>然后基于 <code>react</code> 内置的服务端渲染方法 <code>renderToString()</code>把组件渲染为 <code>html</code>字符串在把最终的 <code>html </code>进行输出前需要将数据注入到浏览器端</p><p>浏览器开始进行渲染和节点对比，然后执行完成组件内事件绑定和一些交互，浏览器重用了服务端输出的 <code>html</code> 节点，整个流程结束</p><h2 id="参考文献" tabindex="-1">参考文献 <a class="header-anchor" href="#参考文献" aria-label="Permalink to &quot;参考文献&quot;">​</a></h2><ul><li><a href="https://zhuanlan.zhihu.com/p/52693113" target="_blank" rel="noreferrer">https://zhuanlan.zhihu.com/p/52693113</a></li><li><a href="https://segmentfault.com/a/1190000020417285" target="_blank" rel="noreferrer">https://segmentfault.com/a/1190000020417285</a></li><li><a href="https://juejin.cn/post/6844904000387563533#heading-14" target="_blank" rel="noreferrer">https://juejin.cn/post/6844904000387563533#heading-14</a></li></ul>`,46),e=[o];function r(c,t,E,y,i,F){return n(),a("div",null,e)}const m=s(p,[["render",r]]);export{b as __pageData,m as default};
