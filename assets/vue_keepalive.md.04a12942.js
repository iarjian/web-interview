import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.2eafe199.js";const b=JSON.parse('{"title":"面试官：说说你对keep-alive的理解是什么？","description":"","frontmatter":{},"headers":[],"relativePath":"vue/keepalive.md","filePath":"vue/keepalive.md","lastUpdated":1694418005000}'),p={name:"vue/keepalive.md"},e=l(`<h1 id="面试官-说说你对keep-alive的理解是什么" tabindex="-1">面试官：说说你对keep-alive的理解是什么？ <a class="header-anchor" href="#面试官-说说你对keep-alive的理解是什么" aria-label="Permalink to &quot;面试官：说说你对keep-alive的理解是什么？&quot;">​</a></h1><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6X3BuZy9nSDMxdUY5VklpYlRaSXdpY3ZmUkR3STRiamRBVGlhVEpFZDNzamRoeTd3MDlVM0k5ZERjNUVVSUNFVk1WSVE2aDFYMjVpY1NRT3lraWFwWEpEUFM0VGJST0l3LzY0MA?x-oss-process=image/format,png" alt=""></p><h2 id="一、keep-alive-是什么" tabindex="-1">一、Keep-alive 是什么 <a class="header-anchor" href="#一、keep-alive-是什么" aria-label="Permalink to &quot;一、Keep-alive 是什么&quot;">​</a></h2><p><code>keep-alive</code>是<code>vue</code>中的内置组件，能在组件切换过程中将状态保留在内存中，防止重复渲染<code>DOM</code></p><p><code>keep-alive</code> 包裹动态组件时，会缓存不活动的组件实例，而不是销毁它们</p><p><code>keep-alive</code>可以设置以下<code>props</code>属性：</p><ul><li><p><code>include</code> - 字符串或正则表达式。只有名称匹配的组件会被缓存</p></li><li><p><code>exclude</code> - 字符串或正则表达式。任何名称匹配的组件都不会被缓存</p></li><li><p><code>max</code> - 数字。最多可以缓存多少组件实例</p></li></ul><p>关于<code>keep-alive</code>的基本用法：</p><div class="language-go vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">keep</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">alive</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">component :is</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;view&quot;</span><span style="color:#F97583;">&gt;&lt;/</span><span style="color:#E1E4E8;">component</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">keep</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">alive</span><span style="color:#F97583;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">keep</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">alive</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">component :is</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;view&quot;</span><span style="color:#D73A49;">&gt;&lt;/</span><span style="color:#24292E;">component</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">keep</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">alive</span><span style="color:#D73A49;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>使用<code>includes</code>和<code>exclude</code>：</p><div class="language-go vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">keep</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">alive include</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;a,b&quot;</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">component :is</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;view&quot;</span><span style="color:#F97583;">&gt;&lt;/</span><span style="color:#E1E4E8;">component</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">keep</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">alive</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">&lt;!--</span><span style="color:#E1E4E8;"> 正则表达式 (使用 </span><span style="color:#9ECBFF;">\`v-bind\`</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">--&gt;</span></span>
<span class="line"><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">keep</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">alive :include</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;/a|b/&quot;</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">component :is</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;view&quot;</span><span style="color:#F97583;">&gt;&lt;/</span><span style="color:#E1E4E8;">component</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">keep</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">alive</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">&lt;!--</span><span style="color:#E1E4E8;"> 数组 (使用 </span><span style="color:#9ECBFF;">\`v-bind\`</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">--&gt;</span></span>
<span class="line"><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">keep</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">alive :include</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;[&#39;a&#39;, &#39;b&#39;]&quot;</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">component :is</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;view&quot;</span><span style="color:#F97583;">&gt;&lt;/</span><span style="color:#E1E4E8;">component</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">keep</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">alive</span><span style="color:#F97583;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">keep</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">alive include</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;a,b&quot;</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">component :is</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;view&quot;</span><span style="color:#D73A49;">&gt;&lt;/</span><span style="color:#24292E;">component</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">keep</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">alive</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">&lt;!--</span><span style="color:#24292E;"> 正则表达式 (使用 </span><span style="color:#032F62;">\`v-bind\`</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">--&gt;</span></span>
<span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">keep</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">alive :include</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;/a|b/&quot;</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">component :is</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;view&quot;</span><span style="color:#D73A49;">&gt;&lt;/</span><span style="color:#24292E;">component</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">keep</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">alive</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">&lt;!--</span><span style="color:#24292E;"> 数组 (使用 </span><span style="color:#032F62;">\`v-bind\`</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">--&gt;</span></span>
<span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">keep</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">alive :include</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;[&#39;a&#39;, &#39;b&#39;]&quot;</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">component :is</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;view&quot;</span><span style="color:#D73A49;">&gt;&lt;/</span><span style="color:#24292E;">component</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">keep</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">alive</span><span style="color:#D73A49;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>匹配首先检查组件自身的 <code>name</code> 选项，如果 <code>name</code> 选项不可用，则匹配它的局部注册名称 (父组件 <code>components</code> 选项的键值)，匿名组件不能被匹配</p><p>设置了 keep-alive 缓存的组件，会多出两个生命周期钩子（<code>activated</code>与<code>deactivated</code>）：</p><ul><li><p>首次进入组件时：<code>beforeRouteEnter</code> &gt; <code>beforeCreate</code> &gt; <code>created</code>&gt; <code>mounted</code> &gt; <code>activated</code> &gt; ... ... &gt; <code>beforeRouteLeave</code> &gt; <code>deactivated</code></p></li><li><p>再次进入组件时：<code>beforeRouteEnter</code> &gt;<code>activated</code> &gt; ... ... &gt; <code>beforeRouteLeave</code> &gt; <code>deactivated</code></p></li></ul><h2 id="二、使用场景" tabindex="-1">二、使用场景 <a class="header-anchor" href="#二、使用场景" aria-label="Permalink to &quot;二、使用场景&quot;">​</a></h2><p>使用原则：当我们在某些场景下不需要让页面重新加载时我们可以使用<code>keepalive</code></p><p>举个栗子:</p><p>当我们从<code>首页</code>–&gt;<code>列表页</code>–&gt;<code>商详页</code>–&gt;<code>再返回</code>，这时候列表页应该是需要<code>keep-alive</code></p><p>从<code>首页</code>–&gt;<code>列表页</code>–&gt;<code>商详页</code>–&gt;<code>返回到列表页(需要缓存)</code>–&gt;<code>返回到首页(需要缓存)</code>–&gt;<code>再次进入列表页(不需要缓存)</code>，这时候可以按需来控制页面的<code>keep-alive</code></p><p>在路由中设置<code>keepAlive</code>属性判断是否需要缓存</p><div class="language-go vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  path: </span><span style="color:#9ECBFF;">&#39;</span><span style="color:#FDAEB7;font-style:italic;">list</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  name: </span><span style="color:#9ECBFF;">&#39;</span><span style="color:#FDAEB7;font-style:italic;">itemList</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">// 列表页</span></span>
<span class="line"><span style="color:#E1E4E8;">  component (resolve) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">require</span><span style="color:#E1E4E8;">([</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#FDAEB7;font-style:italic;">@/pages/item/list</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;">], resolve)</span></span>
<span class="line"><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;"> meta: {</span></span>
<span class="line"><span style="color:#E1E4E8;">  keepAlive: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  title: </span><span style="color:#9ECBFF;">&#39;</span><span style="color:#FDAEB7;font-style:italic;">列表页</span><span style="color:#9ECBFF;">&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  path: </span><span style="color:#032F62;">&#39;</span><span style="color:#B31D28;font-style:italic;">list</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  name: </span><span style="color:#032F62;">&#39;</span><span style="color:#B31D28;font-style:italic;">itemList</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">// 列表页</span></span>
<span class="line"><span style="color:#24292E;">  component (resolve) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">require</span><span style="color:#24292E;">([</span><span style="color:#032F62;">&#39;</span><span style="color:#B31D28;font-style:italic;">@/pages/item/list</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">], resolve)</span></span>
<span class="line"><span style="color:#24292E;"> },</span></span>
<span class="line"><span style="color:#24292E;"> meta: {</span></span>
<span class="line"><span style="color:#24292E;">  keepAlive: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  title: </span><span style="color:#032F62;">&#39;</span><span style="color:#B31D28;font-style:italic;">列表页</span><span style="color:#032F62;">&#39;</span></span>
<span class="line"><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>使用<code>&lt;keep-alive&gt;</code></p><div class="language-go vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">div id</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;app&quot;</span><span style="color:#E1E4E8;"> class</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#FDAEB7;font-style:italic;">wrapper</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">keep</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">alive</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">&lt;!--</span><span style="color:#E1E4E8;"> 需要缓存的视图组件 </span><span style="color:#F97583;">--&gt;</span><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">router</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">view v</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">if</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;$route.meta.keepAlive&quot;</span><span style="color:#F97583;">&gt;&lt;/</span><span style="color:#E1E4E8;">router</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">view</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">keep</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">alive</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">&lt;!--</span><span style="color:#E1E4E8;"> 不需要缓存的视图组件 </span><span style="color:#F97583;">--&gt;</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">router</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">view v</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">if</span><span style="color:#F97583;">=</span><span style="color:#9ECBFF;">&quot;!$route.meta.keepAlive&quot;</span><span style="color:#F97583;">&gt;&lt;/</span><span style="color:#E1E4E8;">router</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">view</span><span style="color:#F97583;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">&lt;/</span><span style="color:#E1E4E8;">div</span><span style="color:#F97583;">&gt;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">div id</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;app&quot;</span><span style="color:#24292E;"> class</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&#39;</span><span style="color:#B31D28;font-style:italic;">wrapper</span><span style="color:#032F62;">&#39;</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">keep</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">alive</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">&lt;!--</span><span style="color:#24292E;"> 需要缓存的视图组件 </span><span style="color:#D73A49;">--&gt;</span><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">router</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">view v</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">if</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;$route.meta.keepAlive&quot;</span><span style="color:#D73A49;">&gt;&lt;/</span><span style="color:#24292E;">router</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">view</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">keep</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">alive</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">&lt;!--</span><span style="color:#24292E;"> 不需要缓存的视图组件 </span><span style="color:#D73A49;">--&gt;</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;">router</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">view v</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">if</span><span style="color:#D73A49;">=</span><span style="color:#032F62;">&quot;!$route.meta.keepAlive&quot;</span><span style="color:#D73A49;">&gt;&lt;/</span><span style="color:#24292E;">router</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">view</span><span style="color:#D73A49;">&gt;</span></span>
<span class="line"><span style="color:#D73A49;">&lt;/</span><span style="color:#24292E;">div</span><span style="color:#D73A49;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="三、原理分析" tabindex="-1">三、原理分析 <a class="header-anchor" href="#三、原理分析" aria-label="Permalink to &quot;三、原理分析&quot;">​</a></h2><p><code>keep-alive</code>是<code>vue</code>中内置的一个组件</p><p>源码位置：src/core/components/keep-alive.js</p><div class="language-go vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark has-diff vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">export </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  name: </span><span style="color:#9ECBFF;">&#39;</span><span style="color:#FDAEB7;font-style:italic;">keep-alive</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  abstract: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  props: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    include: [String, RegExp, Array],</span></span>
<span class="line"><span style="color:#E1E4E8;">    exclude: [String, RegExp, Array],</span></span>
<span class="line"><span style="color:#E1E4E8;">    max: [String, Number]</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  created () {</span></span>
<span class="line"><span style="color:#E1E4E8;">    this.cache </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Object.</span><span style="color:#79B8FF;">create</span><span style="color:#E1E4E8;">(null)</span></span>
<span class="line"><span style="color:#E1E4E8;">    this.keys </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> []</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  destroyed () {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> key in this.cache) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">pruneCacheEntry</span><span style="color:#E1E4E8;">(this.cache, key, this.keys)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  mounted () {</span></span>
<span class="line"><span style="color:#E1E4E8;">    this.$</span><span style="color:#79B8FF;">watch</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#FDAEB7;font-style:italic;">include</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;">, val </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">pruneCache</span><span style="color:#E1E4E8;">(this, name </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">matches</span><span style="color:#E1E4E8;">(val, name))</span></span>
<span class="line"><span style="color:#E1E4E8;">    })</span></span>
<span class="line"><span style="color:#E1E4E8;">    this.$</span><span style="color:#79B8FF;">watch</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#FDAEB7;font-style:italic;">exclude</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;">, val </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">pruneCache</span><span style="color:#E1E4E8;">(this, name </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#79B8FF;">matches</span><span style="color:#E1E4E8;">(val, name))</span></span>
<span class="line"><span style="color:#E1E4E8;">    })</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">render</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/* 获取默认插槽中的第一个组件节点 */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> slot </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> this.$slots.</span><span style="color:#F97583;">default</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> vnode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">getFirstComponentChild</span><span style="color:#E1E4E8;">(slot)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/* 获取该组件节点的componentOptions */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> componentOptions </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> vnode </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> vnode.componentOptions</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (componentOptions) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">/* 获取该组件节点的名称，优先获取组件的name字段，如果name不存在则获取组件的tag */</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">getComponentName</span><span style="color:#E1E4E8;">(componentOptions)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { include, exclude } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> this</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">/* 如果name不在inlcude中或者存在于exlude中则表示不缓存，直接返回vnode */</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span></span>
<span class="line"><span style="color:#E1E4E8;">        (include </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">name </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#79B8FF;">matches</span><span style="color:#E1E4E8;">(include, name))) </span><span style="color:#F97583;">||</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// excluded</span></span>
<span class="line"><span style="color:#E1E4E8;">        (exclude </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> name </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">matches</span><span style="color:#E1E4E8;">(exclude, name))</span></span>
<span class="line"><span style="color:#E1E4E8;">      ) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> vnode</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { cache, keys } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> this</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">/* 获取组件的key值 */</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> key </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> vnode.key </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> null</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// same constructor may get registered as different local components</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// so cid alone is not enough (#3269)</span></span>
<span class="line"><span style="color:#E1E4E8;">        ? componentOptions.Ctor.cid </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> (componentOptions.tag ? </span><span style="color:#9ECBFF;">\`::\${componentOptions.tag}\`</span><span style="color:#E1E4E8;"> : </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">        : vnode.key</span></span>
<span class="line"><span style="color:#E1E4E8;">     </span><span style="color:#6A737D;">/*  拿到key值后去this.cache对象中去寻找是否有该值，如果有则表示该组件有缓存，即命中缓存 */</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (cache[key]) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        vnode.componentInstance </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> cache[key].componentInstance</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// make current key freshest</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">remove</span><span style="color:#E1E4E8;">(keys, key)</span></span>
<span class="line"><span style="color:#E1E4E8;">        keys.</span><span style="color:#79B8FF;">push</span><span style="color:#E1E4E8;">(key)</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">/* 如果没有命中缓存，则将其设置进缓存 */</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        cache[key] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> vnode</span></span>
<span class="line"><span style="color:#E1E4E8;">        keys.</span><span style="color:#79B8FF;">push</span><span style="color:#E1E4E8;">(key)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// prune oldest entry</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">/* 如果配置了max并且缓存的长度超过了this.max，则从缓存中删除第一个 */</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (this.max </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> keys.length </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">parseInt</span><span style="color:#E1E4E8;">(this.max)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#79B8FF;">pruneCacheEntry</span><span style="color:#E1E4E8;">(cache, keys[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">], keys, this._vnode)</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">      vnode.data.keepAlive </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> vnode </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> (slot </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> slot[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">])</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light has-diff vp-code-light"><code><span class="line"><span style="color:#24292E;">export </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  name: </span><span style="color:#032F62;">&#39;</span><span style="color:#B31D28;font-style:italic;">keep-alive</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  abstract: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  props: {</span></span>
<span class="line"><span style="color:#24292E;">    include: [String, RegExp, Array],</span></span>
<span class="line"><span style="color:#24292E;">    exclude: [String, RegExp, Array],</span></span>
<span class="line"><span style="color:#24292E;">    max: [String, Number]</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  created () {</span></span>
<span class="line"><span style="color:#24292E;">    this.cache </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Object.</span><span style="color:#005CC5;">create</span><span style="color:#24292E;">(null)</span></span>
<span class="line"><span style="color:#24292E;">    this.keys </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  destroyed () {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> key in this.cache) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">pruneCacheEntry</span><span style="color:#24292E;">(this.cache, key, this.keys)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  mounted () {</span></span>
<span class="line"><span style="color:#24292E;">    this.$</span><span style="color:#005CC5;">watch</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;</span><span style="color:#B31D28;font-style:italic;">include</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">, val </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">pruneCache</span><span style="color:#24292E;">(this, name </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">matches</span><span style="color:#24292E;">(val, name))</span></span>
<span class="line"><span style="color:#24292E;">    })</span></span>
<span class="line"><span style="color:#24292E;">    this.$</span><span style="color:#005CC5;">watch</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;</span><span style="color:#B31D28;font-style:italic;">exclude</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">, val </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">pruneCache</span><span style="color:#24292E;">(this, name </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#005CC5;">matches</span><span style="color:#24292E;">(val, name))</span></span>
<span class="line"><span style="color:#24292E;">    })</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">render</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/* 获取默认插槽中的第一个组件节点 */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> slot </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> this.$slots.</span><span style="color:#D73A49;">default</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> vnode </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">getFirstComponentChild</span><span style="color:#24292E;">(slot)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/* 获取该组件节点的componentOptions */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> componentOptions </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> vnode </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> vnode.componentOptions</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (componentOptions) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">/* 获取该组件节点的名称，优先获取组件的name字段，如果name不存在则获取组件的tag */</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">getComponentName</span><span style="color:#24292E;">(componentOptions)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { include, exclude } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> this</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">/* 如果name不在inlcude中或者存在于exlude中则表示不缓存，直接返回vnode */</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span></span>
<span class="line"><span style="color:#24292E;">        (include </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">name </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#005CC5;">matches</span><span style="color:#24292E;">(include, name))) </span><span style="color:#D73A49;">||</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// excluded</span></span>
<span class="line"><span style="color:#24292E;">        (exclude </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> name </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">matches</span><span style="color:#24292E;">(exclude, name))</span></span>
<span class="line"><span style="color:#24292E;">      ) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> vnode</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { cache, keys } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> this</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">/* 获取组件的key值 */</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> key </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> vnode.key </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> null</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// same constructor may get registered as different local components</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// so cid alone is not enough (#3269)</span></span>
<span class="line"><span style="color:#24292E;">        ? componentOptions.Ctor.cid </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> (componentOptions.tag ? </span><span style="color:#032F62;">\`::\${componentOptions.tag}\`</span><span style="color:#24292E;"> : </span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">        : vnode.key</span></span>
<span class="line"><span style="color:#24292E;">     </span><span style="color:#6A737D;">/*  拿到key值后去this.cache对象中去寻找是否有该值，如果有则表示该组件有缓存，即命中缓存 */</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (cache[key]) {</span></span>
<span class="line"><span style="color:#24292E;">        vnode.componentInstance </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> cache[key].componentInstance</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// make current key freshest</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">remove</span><span style="color:#24292E;">(keys, key)</span></span>
<span class="line"><span style="color:#24292E;">        keys.</span><span style="color:#005CC5;">push</span><span style="color:#24292E;">(key)</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">/* 如果没有命中缓存，则将其设置进缓存 */</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        cache[key] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> vnode</span></span>
<span class="line"><span style="color:#24292E;">        keys.</span><span style="color:#005CC5;">push</span><span style="color:#24292E;">(key)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// prune oldest entry</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">/* 如果配置了max并且缓存的长度超过了this.max，则从缓存中删除第一个 */</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (this.max </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> keys.length </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">parseInt</span><span style="color:#24292E;">(this.max)) {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#005CC5;">pruneCacheEntry</span><span style="color:#24292E;">(cache, keys[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">], keys, this._vnode)</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">      vnode.data.keepAlive </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> vnode </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> (slot </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> slot[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">])</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br></div></div><p>可以看到该组件没有<code>template</code>，而是用了<code>render</code>，在组件渲染的时候会自动执行<code>render</code>函数</p><p><code>this.cache</code>是一个对象，用来存储需要缓存的组件，它将以如下形式存储：</p><div class="language-go vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">this.cache </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&#39;</span><span style="color:#FDAEB7;font-style:italic;">key1</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;">:</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#FDAEB7;font-style:italic;">组件1</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&#39;</span><span style="color:#FDAEB7;font-style:italic;">key2</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;">:</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#FDAEB7;font-style:italic;">组件2</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">this.cache </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&#39;</span><span style="color:#B31D28;font-style:italic;">key1</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">:</span><span style="color:#032F62;">&#39;</span><span style="color:#B31D28;font-style:italic;">组件1</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&#39;</span><span style="color:#B31D28;font-style:italic;">key2</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">:</span><span style="color:#032F62;">&#39;</span><span style="color:#B31D28;font-style:italic;">组件2</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// ...</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>在组件销毁的时候执行<code>pruneCacheEntry</code>函数</p><div class="language-go vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">function pruneCacheEntry (</span></span>
<span class="line"><span style="color:#E1E4E8;">  cache: VNodeCache,</span></span>
<span class="line"><span style="color:#E1E4E8;">  key: </span><span style="color:#F97583;">string</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  keys: Array</span><span style="color:#F97583;">&lt;</span><span style="color:#F97583;">string</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  current?: VNode</span></span>
<span class="line"><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> cached </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> cache[key]</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">/* 判断当前没有处于被渲染状态的组件，将其销毁*/</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (cached </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">current </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> cached.tag </span><span style="color:#F97583;">!==</span><span style="color:#E1E4E8;"> current.tag)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    cached.componentInstance.$</span><span style="color:#79B8FF;">destroy</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  cache[key] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> null</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">remove</span><span style="color:#E1E4E8;">(keys, key)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">function pruneCacheEntry (</span></span>
<span class="line"><span style="color:#24292E;">  cache: VNodeCache,</span></span>
<span class="line"><span style="color:#24292E;">  key: </span><span style="color:#D73A49;">string</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  keys: Array</span><span style="color:#D73A49;">&lt;</span><span style="color:#D73A49;">string</span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  current?: VNode</span></span>
<span class="line"><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> cached </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> cache[key]</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">/* 判断当前没有处于被渲染状态的组件，将其销毁*/</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (cached </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">current </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> cached.tag </span><span style="color:#D73A49;">!==</span><span style="color:#24292E;"> current.tag)) {</span></span>
<span class="line"><span style="color:#24292E;">    cached.componentInstance.$</span><span style="color:#005CC5;">destroy</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  cache[key] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> null</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">remove</span><span style="color:#24292E;">(keys, key)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>在<code>mounted</code>钩子函数中观测 <code>include</code> 和 <code>exclude</code> 的变化，如下：</p><div class="language-go vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">mounted () {</span></span>
<span class="line"><span style="color:#E1E4E8;">    this.$</span><span style="color:#79B8FF;">watch</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#FDAEB7;font-style:italic;">include</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;">, val </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">pruneCache</span><span style="color:#E1E4E8;">(this, name </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">matches</span><span style="color:#E1E4E8;">(val, name))</span></span>
<span class="line"><span style="color:#E1E4E8;">    })</span></span>
<span class="line"><span style="color:#E1E4E8;">    this.$</span><span style="color:#79B8FF;">watch</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#FDAEB7;font-style:italic;">exclude</span><span style="color:#9ECBFF;">&#39;</span><span style="color:#E1E4E8;">, val </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">pruneCache</span><span style="color:#E1E4E8;">(this, name </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#79B8FF;">matches</span><span style="color:#E1E4E8;">(val, name))</span></span>
<span class="line"><span style="color:#E1E4E8;">    })</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">mounted () {</span></span>
<span class="line"><span style="color:#24292E;">    this.$</span><span style="color:#005CC5;">watch</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;</span><span style="color:#B31D28;font-style:italic;">include</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">, val </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">pruneCache</span><span style="color:#24292E;">(this, name </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">matches</span><span style="color:#24292E;">(val, name))</span></span>
<span class="line"><span style="color:#24292E;">    })</span></span>
<span class="line"><span style="color:#24292E;">    this.$</span><span style="color:#005CC5;">watch</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;</span><span style="color:#B31D28;font-style:italic;">exclude</span><span style="color:#032F62;">&#39;</span><span style="color:#24292E;">, val </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">pruneCache</span><span style="color:#24292E;">(this, name </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#005CC5;">matches</span><span style="color:#24292E;">(val, name))</span></span>
<span class="line"><span style="color:#24292E;">    })</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>如果<code>include</code> 或<code>exclude</code> 发生了变化，即表示定义需要缓存的组件的规则或者不需要缓存的组件的规则发生了变化，那么就执行<code>pruneCache</code>函数，函数如下：</p><div class="language-go vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">function pruneCache (keepAliveInstance, filter) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { cache, keys, _vnode } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> keepAliveInstance</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> key in cache) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> cachedNode </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> cache[key]</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (cachedNode) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> name </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">getComponentName</span><span style="color:#E1E4E8;">(cachedNode.componentOptions)</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (name </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">!</span><span style="color:#79B8FF;">filter</span><span style="color:#E1E4E8;">(name)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">pruneCacheEntry</span><span style="color:#E1E4E8;">(cache, key, keys, _vnode)</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">function pruneCache (keepAliveInstance, filter) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { cache, keys, _vnode } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> keepAliveInstance</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> key in cache) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> cachedNode </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> cache[key]</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (cachedNode) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> name </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">getComponentName</span><span style="color:#24292E;">(cachedNode.componentOptions)</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (name </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">!</span><span style="color:#005CC5;">filter</span><span style="color:#24292E;">(name)) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">pruneCacheEntry</span><span style="color:#24292E;">(cache, key, keys, _vnode)</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>在该函数内对<code>this.cache</code>对象进行遍历，取出每一项的<code>name</code>值，用其与新的缓存规则进行匹配，如果匹配不上，则表示在新的缓存规则下该组件已经不需要被缓存，则调用<code>pruneCacheEntry</code>函数将其从<code>this.cache</code>对象剔除即可</p><p>关于<code>keep-alive</code>的最强大缓存功能是在<code>render</code>函数中实现</p><p>首先获取组件的<code>key</code>值：</p><div class="language-go vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> key </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> vnode.key </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> null? </span></span>
<span class="line"><span style="color:#E1E4E8;">componentOptions.Ctor.cid </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> (componentOptions.tag ? </span><span style="color:#9ECBFF;">\`::\${componentOptions.tag}\`</span><span style="color:#E1E4E8;"> : </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">: vnode.key</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> key </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> vnode.key </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> null? </span></span>
<span class="line"><span style="color:#24292E;">componentOptions.Ctor.cid </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> (componentOptions.tag ? </span><span style="color:#032F62;">\`::\${componentOptions.tag}\`</span><span style="color:#24292E;"> : </span><span style="color:#032F62;">&#39;&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">: vnode.key</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>拿到<code>key</code>值后去<code>this.cache</code>对象中去寻找是否有该值，如果有则表示该组件有缓存，即命中缓存，如下：</p><div class="language-go vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/* 如果命中缓存，则直接从缓存中拿 vnode 的组件实例 */</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (cache[key]) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    vnode.componentInstance </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> cache[key].componentInstance</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/* 调整该组件key的顺序，将其从原来的地方删掉并重新放在最后一个 */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">remove</span><span style="color:#E1E4E8;">(keys, key)</span></span>
<span class="line"><span style="color:#E1E4E8;">    keys.</span><span style="color:#79B8FF;">push</span><span style="color:#E1E4E8;">(key)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/* 如果命中缓存，则直接从缓存中拿 vnode 的组件实例 */</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (cache[key]) {</span></span>
<span class="line"><span style="color:#24292E;">    vnode.componentInstance </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> cache[key].componentInstance</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/* 调整该组件key的顺序，将其从原来的地方删掉并重新放在最后一个 */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">remove</span><span style="color:#24292E;">(keys, key)</span></span>
<span class="line"><span style="color:#24292E;">    keys.</span><span style="color:#005CC5;">push</span><span style="color:#24292E;">(key)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>直接从缓存中拿 <code>vnode</code> 的组件实例，此时重新调整该组件<code>key</code>的顺序，将其从原来的地方删掉并重新放在<code>this.keys</code>中最后一个</p><p><code>this.cache</code>对象中没有该<code>key</code>值的情况，如下：</p><div class="language-go vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/* 如果没有命中缓存，则将其设置进缓存 */</span></span>
<span class="line"><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    cache[key] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> vnode</span></span>
<span class="line"><span style="color:#E1E4E8;">    keys.</span><span style="color:#79B8FF;">push</span><span style="color:#E1E4E8;">(key)</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/* 如果配置了max并且缓存的长度超过了this.max，则从缓存中删除第一个 */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (this.max </span><span style="color:#F97583;">&amp;&amp;</span><span style="color:#E1E4E8;"> keys.length </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">parseInt</span><span style="color:#E1E4E8;">(this.max)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">pruneCacheEntry</span><span style="color:#E1E4E8;">(cache, keys[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">], keys, this._vnode)</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/* 如果没有命中缓存，则将其设置进缓存 */</span></span>
<span class="line"><span style="color:#D73A49;">else</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    cache[key] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> vnode</span></span>
<span class="line"><span style="color:#24292E;">    keys.</span><span style="color:#005CC5;">push</span><span style="color:#24292E;">(key)</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">/* 如果配置了max并且缓存的长度超过了this.max，则从缓存中删除第一个 */</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (this.max </span><span style="color:#D73A49;">&amp;&amp;</span><span style="color:#24292E;"> keys.length </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">parseInt</span><span style="color:#24292E;">(this.max)) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">pruneCacheEntry</span><span style="color:#24292E;">(cache, keys[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">], keys, this._vnode)</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>表明该组件还没有被缓存过，则以该组件的<code>key</code>为键，组件<code>vnode</code>为值，将其存入<code>this.cache</code>中，并且把<code>key</code>存入<code>this.keys</code>中</p><p>此时再判断<code>this.keys</code>中缓存组件的数量是否超过了设置的最大缓存数量值<code>this.max</code>，如果超过了，则把第一个缓存组件删掉</p><h2 id="四、思考题-缓存后如何获取数据" tabindex="-1">四、思考题：缓存后如何获取数据 <a class="header-anchor" href="#四、思考题-缓存后如何获取数据" aria-label="Permalink to &quot;四、思考题：缓存后如何获取数据&quot;">​</a></h2><p>解决方案可以有以下两种：</p><ul><li><p>beforeRouteEnter</p></li><li><p>actived</p></li></ul><h3 id="beforerouteenter" tabindex="-1">beforeRouteEnter <a class="header-anchor" href="#beforerouteenter" aria-label="Permalink to &quot;beforeRouteEnter&quot;">​</a></h3><p>每次组件渲染的时候，都会执行<code>beforeRouteEnter</code></p><div class="language-go vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">beforeRouteEnter</span><span style="color:#E1E4E8;">(to, from, next){</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">next</span><span style="color:#E1E4E8;">(vm</span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">        console.</span><span style="color:#79B8FF;">log</span><span style="color:#E1E4E8;">(vm)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 每次进入路由执行</span></span>
<span class="line"><span style="color:#E1E4E8;">        vm.</span><span style="color:#79B8FF;">getData</span><span style="color:#E1E4E8;">()  </span><span style="color:#6A737D;">// 获取数据</span></span>
<span class="line"><span style="color:#E1E4E8;">    })</span></span>
<span class="line"><span style="color:#E1E4E8;">},</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">beforeRouteEnter</span><span style="color:#24292E;">(to, from, next){</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">next</span><span style="color:#24292E;">(vm</span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">        console.</span><span style="color:#005CC5;">log</span><span style="color:#24292E;">(vm)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 每次进入路由执行</span></span>
<span class="line"><span style="color:#24292E;">        vm.</span><span style="color:#005CC5;">getData</span><span style="color:#24292E;">()  </span><span style="color:#6A737D;">// 获取数据</span></span>
<span class="line"><span style="color:#24292E;">    })</span></span>
<span class="line"><span style="color:#24292E;">},</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="actived" tabindex="-1">actived <a class="header-anchor" href="#actived" aria-label="Permalink to &quot;actived&quot;">​</a></h3><p>在<code>keep-alive</code>缓存的组件被激活的时候，都会执行<code>actived</code>钩子</p><div class="language-go vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;">activated</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">   this.</span><span style="color:#79B8FF;">getData</span><span style="color:#E1E4E8;">() </span><span style="color:#6A737D;">// 获取数据</span></span>
<span class="line"><span style="color:#E1E4E8;">},</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;">activated</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">   this.</span><span style="color:#005CC5;">getData</span><span style="color:#24292E;">() </span><span style="color:#6A737D;">// 获取数据</span></span>
<span class="line"><span style="color:#24292E;">},</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>注意：服务器端渲染期间<code>avtived</code>不被调用</p><h2 id="参考文献" tabindex="-1">参考文献 <a class="header-anchor" href="#参考文献" aria-label="Permalink to &quot;参考文献&quot;">​</a></h2><ul><li><a href="https://www.cnblogs.com/dhui/p/13589401.html" target="_blank" rel="noreferrer">https://www.cnblogs.com/dhui/p/13589401.html</a></li><li><a href="https://www.cnblogs.com/wangjiachen666/p/11497200.html" target="_blank" rel="noreferrer">https://www.cnblogs.com/wangjiachen666/p/11497200.html</a></li><li><a href="https://vue3js.cn/docs/zh" target="_blank" rel="noreferrer">https://vue3js.cn/docs/zh</a></li></ul>`,59),o=[e];function c(t,r,y,E,i,d){return n(),a("div",null,o)}const m=s(p,[["render",c]]);export{b as __pageData,m as default};
